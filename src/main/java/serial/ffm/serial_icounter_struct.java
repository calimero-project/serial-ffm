// Generated by jextract

// This struct is saved here, because we need serial_icounter_struct for TIOCGICOUNT,
// but that functionality is not supported on macOS.

package serial.ffm;

import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.VarHandle;

@SuppressWarnings("checkstyle:all")
class serial_icounter_struct {

	static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
			ValueLayout.JAVA_INT.withName("cts"),
			ValueLayout.JAVA_INT.withName("dsr"),
			ValueLayout.JAVA_INT.withName("rng"),
			ValueLayout.JAVA_INT.withName("dcd"),
			ValueLayout.JAVA_INT.withName("rx"),
			ValueLayout.JAVA_INT.withName("tx"),
			ValueLayout.JAVA_INT.withName("frame"),
			ValueLayout.JAVA_INT.withName("overrun"),
			ValueLayout.JAVA_INT.withName("parity"),
			ValueLayout.JAVA_INT.withName("brk"),
			ValueLayout.JAVA_INT.withName("buf_overrun"),
			MemoryLayout.sequenceLayout(9, ValueLayout.JAVA_INT).withName("reserved")
			).withName("serial_icounter_struct");
	public static MemoryLayout $LAYOUT() {
		return serial_icounter_struct.$struct$LAYOUT;
	}
	static final VarHandle cts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cts"));
	public static VarHandle cts$VH() {
		return serial_icounter_struct.cts$VH;
	}
	public static int cts$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.cts$VH.get(seg);
	}
	public static void cts$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.cts$VH.set(seg, x);
	}
	public static int cts$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.cts$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void cts$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.cts$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle dsr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dsr"));
	public static VarHandle dsr$VH() {
		return serial_icounter_struct.dsr$VH;
	}
	public static int dsr$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.dsr$VH.get(seg);
	}
	public static void dsr$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.dsr$VH.set(seg, x);
	}
	public static int dsr$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.dsr$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void dsr$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.dsr$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle rng$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rng"));
	public static VarHandle rng$VH() {
		return serial_icounter_struct.rng$VH;
	}
	public static int rng$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.rng$VH.get(seg);
	}
	public static void rng$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.rng$VH.set(seg, x);
	}
	public static int rng$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.rng$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void rng$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.rng$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle dcd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dcd"));
	public static VarHandle dcd$VH() {
		return serial_icounter_struct.dcd$VH;
	}
	public static int dcd$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.dcd$VH.get(seg);
	}
	public static void dcd$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.dcd$VH.set(seg, x);
	}
	public static int dcd$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.dcd$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void dcd$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.dcd$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle rx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rx"));
	public static VarHandle rx$VH() {
		return serial_icounter_struct.rx$VH;
	}
	public static int rx$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.rx$VH.get(seg);
	}
	public static void rx$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.rx$VH.set(seg, x);
	}
	public static int rx$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.rx$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void rx$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.rx$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle tx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tx"));
	public static VarHandle tx$VH() {
		return serial_icounter_struct.tx$VH;
	}
	public static int tx$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.tx$VH.get(seg);
	}
	public static void tx$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.tx$VH.set(seg, x);
	}
	public static int tx$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.tx$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void tx$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.tx$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("frame"));
	public static VarHandle frame$VH() {
		return serial_icounter_struct.frame$VH;
	}
	public static int frame$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.frame$VH.get(seg);
	}
	public static void frame$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.frame$VH.set(seg, x);
	}
	public static int frame$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.frame$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void frame$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.frame$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle overrun$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("overrun"));
	public static VarHandle overrun$VH() {
		return serial_icounter_struct.overrun$VH;
	}
	public static int overrun$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.overrun$VH.get(seg);
	}
	public static void overrun$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.overrun$VH.set(seg, x);
	}
	public static int overrun$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.overrun$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void overrun$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.overrun$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle parity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parity"));
	public static VarHandle parity$VH() {
		return serial_icounter_struct.parity$VH;
	}
	public static int parity$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.parity$VH.get(seg);
	}
	public static void parity$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.parity$VH.set(seg, x);
	}
	public static int parity$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.parity$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void parity$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.parity$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle brk$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("brk"));
	public static VarHandle brk$VH() {
		return serial_icounter_struct.brk$VH;
	}
	public static int brk$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.brk$VH.get(seg);
	}
	public static void brk$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.brk$VH.set(seg, x);
	}
	public static int brk$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.brk$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void brk$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.brk$VH.set(seg.asSlice(index*sizeof()), x);
	}
	static final VarHandle buf_overrun$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf_overrun"));
	public static VarHandle buf_overrun$VH() {
		return serial_icounter_struct.buf_overrun$VH;
	}
	public static int buf_overrun$get(final MemorySegment seg) {
		return (int)serial_icounter_struct.buf_overrun$VH.get(seg);
	}
	public static void buf_overrun$set( final MemorySegment seg, final int x) {
		serial_icounter_struct.buf_overrun$VH.set(seg, x);
	}
	public static int buf_overrun$get(final MemorySegment seg, final long index) {
		return (int)serial_icounter_struct.buf_overrun$VH.get(seg.asSlice(index*sizeof()));
	}
	public static void buf_overrun$set(final MemorySegment seg, final long index, final int x) {
		serial_icounter_struct.buf_overrun$VH.set(seg.asSlice(index*sizeof()), x);
	}
	public static MemorySegment reserved$slice(final MemorySegment seg) {
		return seg.asSlice(44, 36);
	}
	public static long sizeof() { return $LAYOUT().byteSize(); }
	public static MemorySegment allocate(final SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
	public static MemorySegment allocateArray(final int len, final SegmentAllocator allocator) {
		return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
	}
//    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}
