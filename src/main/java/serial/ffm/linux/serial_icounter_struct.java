// Generated by jextract

package serial.ffm.linux;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.foreign.ValueLayout.OfInt;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import org.unix.Linux;

/**
 * {@snippet lang=c :
 * struct serial_icounter_struct {
 *     int cts;
 *     int dsr;
 *     int rng;
 *     int dcd;
 *     int rx;
 *     int tx;
 *     int frame;
 *     int overrun;
 *     int parity;
 *     int brk;
 *     int buf_overrun;
 *     int reserved[9];
 * }
 * }
 */
public class serial_icounter_struct {

    serial_icounter_struct() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Linux.C_INT.withName("cts"),
        Linux.C_INT.withName("dsr"),
        Linux.C_INT.withName("rng"),
        Linux.C_INT.withName("dcd"),
        Linux.C_INT.withName("rx"),
        Linux.C_INT.withName("tx"),
        Linux.C_INT.withName("frame"),
        Linux.C_INT.withName("overrun"),
        Linux.C_INT.withName("parity"),
        Linux.C_INT.withName("brk"),
        Linux.C_INT.withName("buf_overrun"),
        MemoryLayout.sequenceLayout(9, Linux.C_INT).withName("reserved")
    ).withName("serial_icounter_struct");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cts
     * }
     */
    public static final OfInt cts$layout() {
        return cts$LAYOUT;
    }

    private static final long cts$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cts
     * }
     */
    public static final long cts$offset() {
        return cts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cts
     * }
     */
    public static int cts(MemorySegment struct) {
        return struct.get(cts$LAYOUT, cts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cts
     * }
     */
    public static void cts(MemorySegment struct, int fieldValue) {
        struct.set(cts$LAYOUT, cts$OFFSET, fieldValue);
    }

    private static final OfInt dsr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dsr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dsr
     * }
     */
    public static final OfInt dsr$layout() {
        return dsr$LAYOUT;
    }

    private static final long dsr$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dsr
     * }
     */
    public static final long dsr$offset() {
        return dsr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dsr
     * }
     */
    public static int dsr(MemorySegment struct) {
        return struct.get(dsr$LAYOUT, dsr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dsr
     * }
     */
    public static void dsr(MemorySegment struct, int fieldValue) {
        struct.set(dsr$LAYOUT, dsr$OFFSET, fieldValue);
    }

    private static final OfInt rng$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rng"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int rng
     * }
     */
    public static final OfInt rng$layout() {
        return rng$LAYOUT;
    }

    private static final long rng$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int rng
     * }
     */
    public static final long rng$offset() {
        return rng$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int rng
     * }
     */
    public static int rng(MemorySegment struct) {
        return struct.get(rng$LAYOUT, rng$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int rng
     * }
     */
    public static void rng(MemorySegment struct, int fieldValue) {
        struct.set(rng$LAYOUT, rng$OFFSET, fieldValue);
    }

    private static final OfInt dcd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dcd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dcd
     * }
     */
    public static final OfInt dcd$layout() {
        return dcd$LAYOUT;
    }

    private static final long dcd$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dcd
     * }
     */
    public static final long dcd$offset() {
        return dcd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dcd
     * }
     */
    public static int dcd(MemorySegment struct) {
        return struct.get(dcd$LAYOUT, dcd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dcd
     * }
     */
    public static void dcd(MemorySegment struct, int fieldValue) {
        struct.set(dcd$LAYOUT, dcd$OFFSET, fieldValue);
    }

    private static final OfInt rx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int rx
     * }
     */
    public static final OfInt rx$layout() {
        return rx$LAYOUT;
    }

    private static final long rx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int rx
     * }
     */
    public static final long rx$offset() {
        return rx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int rx
     * }
     */
    public static int rx(MemorySegment struct) {
        return struct.get(rx$LAYOUT, rx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int rx
     * }
     */
    public static void rx(MemorySegment struct, int fieldValue) {
        struct.set(rx$LAYOUT, rx$OFFSET, fieldValue);
    }

    private static final OfInt tx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tx
     * }
     */
    public static final OfInt tx$layout() {
        return tx$LAYOUT;
    }

    private static final long tx$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tx
     * }
     */
    public static final long tx$offset() {
        return tx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tx
     * }
     */
    public static int tx(MemorySegment struct) {
        return struct.get(tx$LAYOUT, tx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tx
     * }
     */
    public static void tx(MemorySegment struct, int fieldValue) {
        struct.set(tx$LAYOUT, tx$OFFSET, fieldValue);
    }

    private static final OfInt frame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int frame
     * }
     */
    public static final OfInt frame$layout() {
        return frame$LAYOUT;
    }

    private static final long frame$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int frame
     * }
     */
    public static final long frame$offset() {
        return frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int frame
     * }
     */
    public static int frame(MemorySegment struct) {
        return struct.get(frame$LAYOUT, frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int frame
     * }
     */
    public static void frame(MemorySegment struct, int fieldValue) {
        struct.set(frame$LAYOUT, frame$OFFSET, fieldValue);
    }

    private static final OfInt overrun$LAYOUT = (OfInt)$LAYOUT.select(groupElement("overrun"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int overrun
     * }
     */
    public static final OfInt overrun$layout() {
        return overrun$LAYOUT;
    }

    private static final long overrun$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int overrun
     * }
     */
    public static final long overrun$offset() {
        return overrun$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int overrun
     * }
     */
    public static int overrun(MemorySegment struct) {
        return struct.get(overrun$LAYOUT, overrun$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int overrun
     * }
     */
    public static void overrun(MemorySegment struct, int fieldValue) {
        struct.set(overrun$LAYOUT, overrun$OFFSET, fieldValue);
    }

    private static final OfInt parity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("parity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int parity
     * }
     */
    public static final OfInt parity$layout() {
        return parity$LAYOUT;
    }

    private static final long parity$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int parity
     * }
     */
    public static final long parity$offset() {
        return parity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int parity
     * }
     */
    public static int parity(MemorySegment struct) {
        return struct.get(parity$LAYOUT, parity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int parity
     * }
     */
    public static void parity(MemorySegment struct, int fieldValue) {
        struct.set(parity$LAYOUT, parity$OFFSET, fieldValue);
    }

    private static final OfInt brk$LAYOUT = (OfInt)$LAYOUT.select(groupElement("brk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int brk
     * }
     */
    public static final OfInt brk$layout() {
        return brk$LAYOUT;
    }

    private static final long brk$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int brk
     * }
     */
    public static final long brk$offset() {
        return brk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int brk
     * }
     */
    public static int brk(MemorySegment struct) {
        return struct.get(brk$LAYOUT, brk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int brk
     * }
     */
    public static void brk(MemorySegment struct, int fieldValue) {
        struct.set(brk$LAYOUT, brk$OFFSET, fieldValue);
    }

    private static final OfInt buf_overrun$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buf_overrun"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int buf_overrun
     * }
     */
    public static final OfInt buf_overrun$layout() {
        return buf_overrun$LAYOUT;
    }

    private static final long buf_overrun$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int buf_overrun
     * }
     */
    public static final long buf_overrun$offset() {
        return buf_overrun$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int buf_overrun
     * }
     */
    public static int buf_overrun(MemorySegment struct) {
        return struct.get(buf_overrun$LAYOUT, buf_overrun$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int buf_overrun
     * }
     */
    public static void buf_overrun(MemorySegment struct, int fieldValue) {
        struct.set(buf_overrun$LAYOUT, buf_overrun$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 9 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int reserved[9]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
