// Generated by jextract

package serial.ffm.linux;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct serial_icounter_struct {
 *     int cts;
 *     int dsr;
 *     int rng;
 *     int dcd;
 *     int rx;
 *     int tx;
 *     int frame;
 *     int overrun;
 *     int parity;
 *     int brk;
 *     int buf_overrun;
 *     int reserved[9];
 * };
 * }
 */
public class serial_icounter_struct {

    public static MemoryLayout $LAYOUT() {
        return constants$14.const$2;
    }
    public static VarHandle cts$VH() {
        return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cts;
     * }
     */
    public static int cts$get(MemorySegment seg) {
        return (int)constants$14.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cts;
     * }
     */
    public static void cts$set(MemorySegment seg, int x) {
        constants$14.const$3.set(seg, 0L, x);
    }
    public static int cts$get(MemorySegment seg, long index) {
        return (int)constants$14.const$3.get(seg, index * sizeof());    }
    public static void cts$set(MemorySegment seg, long index, int x) {
        constants$14.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle dsr$VH() {
        return constants$14.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dsr;
     * }
     */
    public static int dsr$get(MemorySegment seg) {
        return (int)constants$14.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dsr;
     * }
     */
    public static void dsr$set(MemorySegment seg, int x) {
        constants$14.const$4.set(seg, 0L, x);
    }
    public static int dsr$get(MemorySegment seg, long index) {
        return (int)constants$14.const$4.get(seg, index * sizeof());    }
    public static void dsr$set(MemorySegment seg, long index, int x) {
        constants$14.const$4.set(seg, index * sizeof(), x);
    }
    public static VarHandle rng$VH() {
        return constants$14.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int rng;
     * }
     */
    public static int rng$get(MemorySegment seg) {
        return (int)constants$14.const$5.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int rng;
     * }
     */
    public static void rng$set(MemorySegment seg, int x) {
        constants$14.const$5.set(seg, 0L, x);
    }
    public static int rng$get(MemorySegment seg, long index) {
        return (int)constants$14.const$5.get(seg, index * sizeof());    }
    public static void rng$set(MemorySegment seg, long index, int x) {
        constants$14.const$5.set(seg, index * sizeof(), x);
    }
    public static VarHandle dcd$VH() {
        return constants$15.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dcd;
     * }
     */
    public static int dcd$get(MemorySegment seg) {
        return (int)constants$15.const$0.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dcd;
     * }
     */
    public static void dcd$set(MemorySegment seg, int x) {
        constants$15.const$0.set(seg, 0L, x);
    }
    public static int dcd$get(MemorySegment seg, long index) {
        return (int)constants$15.const$0.get(seg, index * sizeof());    }
    public static void dcd$set(MemorySegment seg, long index, int x) {
        constants$15.const$0.set(seg, index * sizeof(), x);
    }
    public static VarHandle rx$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int rx;
     * }
     */
    public static int rx$get(MemorySegment seg) {
        return (int)constants$15.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int rx;
     * }
     */
    public static void rx$set(MemorySegment seg, int x) {
        constants$15.const$1.set(seg, 0L, x);
    }
    public static int rx$get(MemorySegment seg, long index) {
        return (int)constants$15.const$1.get(seg, index * sizeof());    }
    public static void rx$set(MemorySegment seg, long index, int x) {
        constants$15.const$1.set(seg, index * sizeof(), x);
    }
    public static VarHandle tx$VH() {
        return constants$15.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tx;
     * }
     */
    public static int tx$get(MemorySegment seg) {
        return (int)constants$15.const$2.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tx;
     * }
     */
    public static void tx$set(MemorySegment seg, int x) {
        constants$15.const$2.set(seg, 0L, x);
    }
    public static int tx$get(MemorySegment seg, long index) {
        return (int)constants$15.const$2.get(seg, index * sizeof());    }
    public static void tx$set(MemorySegment seg, long index, int x) {
        constants$15.const$2.set(seg, index * sizeof(), x);
    }
    public static VarHandle frame$VH() {
        return constants$15.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int frame;
     * }
     */
    public static int frame$get(MemorySegment seg) {
        return (int)constants$15.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int frame;
     * }
     */
    public static void frame$set(MemorySegment seg, int x) {
        constants$15.const$3.set(seg, 0L, x);
    }
    public static int frame$get(MemorySegment seg, long index) {
        return (int)constants$15.const$3.get(seg, index * sizeof());    }
    public static void frame$set(MemorySegment seg, long index, int x) {
        constants$15.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle overrun$VH() {
        return constants$15.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int overrun;
     * }
     */
    public static int overrun$get(MemorySegment seg) {
        return (int)constants$15.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int overrun;
     * }
     */
    public static void overrun$set(MemorySegment seg, int x) {
        constants$15.const$4.set(seg, 0L, x);
    }
    public static int overrun$get(MemorySegment seg, long index) {
        return (int)constants$15.const$4.get(seg, index * sizeof());    }
    public static void overrun$set(MemorySegment seg, long index, int x) {
        constants$15.const$4.set(seg, index * sizeof(), x);
    }
    public static VarHandle parity$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int parity;
     * }
     */
    public static int parity$get(MemorySegment seg) {
        return (int)constants$15.const$5.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int parity;
     * }
     */
    public static void parity$set(MemorySegment seg, int x) {
        constants$15.const$5.set(seg, 0L, x);
    }
    public static int parity$get(MemorySegment seg, long index) {
        return (int)constants$15.const$5.get(seg, index * sizeof());    }
    public static void parity$set(MemorySegment seg, long index, int x) {
        constants$15.const$5.set(seg, index * sizeof(), x);
    }
    public static VarHandle brk$VH() {
        return constants$16.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int brk;
     * }
     */
    public static int brk$get(MemorySegment seg) {
        return (int)constants$16.const$0.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int brk;
     * }
     */
    public static void brk$set(MemorySegment seg, int x) {
        constants$16.const$0.set(seg, 0L, x);
    }
    public static int brk$get(MemorySegment seg, long index) {
        return (int)constants$16.const$0.get(seg, index * sizeof());    }
    public static void brk$set(MemorySegment seg, long index, int x) {
        constants$16.const$0.set(seg, index * sizeof(), x);
    }
    public static VarHandle buf_overrun$VH() {
        return constants$16.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int buf_overrun;
     * }
     */
    public static int buf_overrun$get(MemorySegment seg) {
        return (int)constants$16.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int buf_overrun;
     * }
     */
    public static void buf_overrun$set(MemorySegment seg, int x) {
        constants$16.const$1.set(seg, 0L, x);
    }
    public static int buf_overrun$get(MemorySegment seg, long index) {
        return (int)constants$16.const$1.get(seg, index * sizeof());    }
    public static void buf_overrun$set(MemorySegment seg, long index, int x) {
        constants$16.const$1.set(seg, index * sizeof(), x);
    }
    public static MemorySegment reserved$slice(MemorySegment seg) {
        return seg.asSlice(44, 36);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
//    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}
