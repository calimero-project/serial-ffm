// Generated by jextract

package serial.ffm.linux;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct serial_struct {
 *     int type;
 *     int line;
 *     unsigned int port;
 *     int irq;
 *     int flags;
 *     int xmit_fifo_size;
 *     int custom_divisor;
 *     int baud_base;
 *     unsigned short close_delay;
 *     char io_type;
 *     char reserved_char[1];
 *     int hub6;
 *     unsigned short closing_wait;
 *     unsigned short closing_wait2;
 *     unsigned char* iomem_base;
 *     unsigned short iomem_reg_shift;
 *     unsigned int port_high;
 *     unsigned long iomap_base;
 * };
 * }
 */
public class serial_struct {

    public static MemoryLayout $LAYOUT() {
        return constants$11.const$2;
    }
    public static VarHandle type$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$11.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$11.const$3.set(seg, 0L, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$11.const$3.get(seg, index * sizeof());    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$11.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle line$VH() {
        return constants$11.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int line;
     * }
     */
    public static int line$get(MemorySegment seg) {
        return (int)constants$11.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int line;
     * }
     */
    public static void line$set(MemorySegment seg, int x) {
        constants$11.const$4.set(seg, 0L, x);
    }
    public static int line$get(MemorySegment seg, long index) {
        return (int)constants$11.const$4.get(seg, index * sizeof());    }
    public static void line$set(MemorySegment seg, long index, int x) {
        constants$11.const$4.set(seg, index * sizeof(), x);
    }
    public static VarHandle port$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int port;
     * }
     */
    public static int port$get(MemorySegment seg) {
        return (int)constants$11.const$5.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int port;
     * }
     */
    public static void port$set(MemorySegment seg, int x) {
        constants$11.const$5.set(seg, 0L, x);
    }
    public static int port$get(MemorySegment seg, long index) {
        return (int)constants$11.const$5.get(seg, index * sizeof());    }
    public static void port$set(MemorySegment seg, long index, int x) {
        constants$11.const$5.set(seg, index * sizeof(), x);
    }
    public static VarHandle irq$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int irq;
     * }
     */
    public static int irq$get(MemorySegment seg) {
        return (int)constants$12.const$0.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int irq;
     * }
     */
    public static void irq$set(MemorySegment seg, int x) {
        constants$12.const$0.set(seg, 0L, x);
    }
    public static int irq$get(MemorySegment seg, long index) {
        return (int)constants$12.const$0.get(seg, index * sizeof());    }
    public static void irq$set(MemorySegment seg, long index, int x) {
        constants$12.const$0.set(seg, index * sizeof(), x);
    }
    public static VarHandle flags$VH() {
        return constants$12.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$12.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$12.const$1.set(seg, 0L, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$12.const$1.get(seg, index * sizeof());    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$12.const$1.set(seg, index * sizeof(), x);
    }
    public static VarHandle xmit_fifo_size$VH() {
        return constants$12.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int xmit_fifo_size;
     * }
     */
    public static int xmit_fifo_size$get(MemorySegment seg) {
        return (int)constants$12.const$2.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int xmit_fifo_size;
     * }
     */
    public static void xmit_fifo_size$set(MemorySegment seg, int x) {
        constants$12.const$2.set(seg, 0L, x);
    }
    public static int xmit_fifo_size$get(MemorySegment seg, long index) {
        return (int)constants$12.const$2.get(seg, index * sizeof());    }
    public static void xmit_fifo_size$set(MemorySegment seg, long index, int x) {
        constants$12.const$2.set(seg, index * sizeof(), x);
    }
    public static VarHandle custom_divisor$VH() {
        return constants$12.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int custom_divisor;
     * }
     */
    public static int custom_divisor$get(MemorySegment seg) {
        return (int)constants$12.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int custom_divisor;
     * }
     */
    public static void custom_divisor$set(MemorySegment seg, int x) {
        constants$12.const$3.set(seg, 0L, x);
    }
    public static int custom_divisor$get(MemorySegment seg, long index) {
        return (int)constants$12.const$3.get(seg, index * sizeof());    }
    public static void custom_divisor$set(MemorySegment seg, long index, int x) {
        constants$12.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle baud_base$VH() {
        return constants$12.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int baud_base;
     * }
     */
    public static int baud_base$get(MemorySegment seg) {
        return (int)constants$12.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int baud_base;
     * }
     */
    public static void baud_base$set(MemorySegment seg, int x) {
        constants$12.const$4.set(seg, 0L, x);
    }
    public static int baud_base$get(MemorySegment seg, long index) {
        return (int)constants$12.const$4.get(seg, index * sizeof());    }
    public static void baud_base$set(MemorySegment seg, long index, int x) {
        constants$12.const$4.set(seg, index * sizeof(), x);
    }
    public static VarHandle close_delay$VH() {
        return constants$12.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short close_delay;
     * }
     */
    public static short close_delay$get(MemorySegment seg) {
        return (short)constants$12.const$5.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short close_delay;
     * }
     */
    public static void close_delay$set(MemorySegment seg, short x) {
        constants$12.const$5.set(seg, 0L, x);
    }
    public static short close_delay$get(MemorySegment seg, long index) {
        return (short)constants$12.const$5.get(seg, index * sizeof());    }
    public static void close_delay$set(MemorySegment seg, long index, short x) {
        constants$12.const$5.set(seg, index * sizeof(), x);
    }
    public static VarHandle io_type$VH() {
        return constants$13.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char io_type;
     * }
     */
    public static byte io_type$get(MemorySegment seg) {
        return (byte)constants$13.const$0.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char io_type;
     * }
     */
    public static void io_type$set(MemorySegment seg, byte x) {
        constants$13.const$0.set(seg, 0L, x);
    }
    public static byte io_type$get(MemorySegment seg, long index) {
        return (byte)constants$13.const$0.get(seg, index * sizeof());    }
    public static void io_type$set(MemorySegment seg, long index, byte x) {
        constants$13.const$0.set(seg, index * sizeof(), x);
    }
    public static MemorySegment reserved_char$slice(MemorySegment seg) {
        return seg.asSlice(35, 1);
    }
    public static VarHandle hub6$VH() {
        return constants$13.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hub6;
     * }
     */
    public static int hub6$get(MemorySegment seg) {
        return (int)constants$13.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hub6;
     * }
     */
    public static void hub6$set(MemorySegment seg, int x) {
        constants$13.const$1.set(seg, 0L, x);
    }
    public static int hub6$get(MemorySegment seg, long index) {
        return (int)constants$13.const$1.get(seg, index * sizeof());    }
    public static void hub6$set(MemorySegment seg, long index, int x) {
        constants$13.const$1.set(seg, index * sizeof(), x);
    }
    public static VarHandle closing_wait$VH() {
        return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short closing_wait;
     * }
     */
    public static short closing_wait$get(MemorySegment seg) {
        return (short)constants$13.const$2.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short closing_wait;
     * }
     */
    public static void closing_wait$set(MemorySegment seg, short x) {
        constants$13.const$2.set(seg, 0L, x);
    }
    public static short closing_wait$get(MemorySegment seg, long index) {
        return (short)constants$13.const$2.get(seg, index * sizeof());    }
    public static void closing_wait$set(MemorySegment seg, long index, short x) {
        constants$13.const$2.set(seg, index * sizeof(), x);
    }
    public static VarHandle closing_wait2$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short closing_wait2;
     * }
     */
    public static short closing_wait2$get(MemorySegment seg) {
        return (short)constants$13.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short closing_wait2;
     * }
     */
    public static void closing_wait2$set(MemorySegment seg, short x) {
        constants$13.const$3.set(seg, 0L, x);
    }
    public static short closing_wait2$get(MemorySegment seg, long index) {
        return (short)constants$13.const$3.get(seg, index * sizeof());    }
    public static void closing_wait2$set(MemorySegment seg, long index, short x) {
        constants$13.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle iomem_base$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* iomem_base;
     * }
     */
    public static MemorySegment iomem_base$get(MemorySegment seg) {
        return (MemorySegment)constants$13.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* iomem_base;
     * }
     */
    public static void iomem_base$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$4.set(seg, 0L, x);
    }
    public static MemorySegment iomem_base$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$13.const$4.get(seg, index * sizeof());    }
    public static void iomem_base$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$4.set(seg, index * sizeof(), x);
    }
    public static VarHandle iomem_reg_shift$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short iomem_reg_shift;
     * }
     */
    public static short iomem_reg_shift$get(MemorySegment seg) {
        return (short)constants$13.const$5.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short iomem_reg_shift;
     * }
     */
    public static void iomem_reg_shift$set(MemorySegment seg, short x) {
        constants$13.const$5.set(seg, 0L, x);
    }
    public static short iomem_reg_shift$get(MemorySegment seg, long index) {
        return (short)constants$13.const$5.get(seg, index * sizeof());    }
    public static void iomem_reg_shift$set(MemorySegment seg, long index, short x) {
        constants$13.const$5.set(seg, index * sizeof(), x);
    }
    public static VarHandle port_high$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int port_high;
     * }
     */
    public static int port_high$get(MemorySegment seg) {
        return (int)constants$14.const$0.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int port_high;
     * }
     */
    public static void port_high$set(MemorySegment seg, int x) {
        constants$14.const$0.set(seg, 0L, x);
    }
    public static int port_high$get(MemorySegment seg, long index) {
        return (int)constants$14.const$0.get(seg, index * sizeof());    }
    public static void port_high$set(MemorySegment seg, long index, int x) {
        constants$14.const$0.set(seg, index * sizeof(), x);
    }
    public static VarHandle iomap_base$VH() {
        return constants$14.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long iomap_base;
     * }
     */
    public static long iomap_base$get(MemorySegment seg) {
        return (long)constants$14.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long iomap_base;
     * }
     */
    public static void iomap_base$set(MemorySegment seg, long x) {
        constants$14.const$1.set(seg, 0L, x);
    }
    public static long iomap_base$get(MemorySegment seg, long index) {
        return (long)constants$14.const$1.get(seg, index * sizeof());    }
    public static void iomap_base$set(MemorySegment seg, long index, long x) {
        constants$14.const$1.set(seg, index * sizeof(), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
//    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}
