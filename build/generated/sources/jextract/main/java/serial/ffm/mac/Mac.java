// Generated by jextract

package serial.ffm.mac;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Mac {

    Mac() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.findOrThrow(symbol);
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = (ValueLayout.OfBoolean) Linker.nativeLinker().canonicalLayouts().get("bool");
    public static final ValueLayout.OfByte C_CHAR =(ValueLayout.OfByte)Linker.nativeLinker().canonicalLayouts().get("char");
    public static final ValueLayout.OfShort C_SHORT = (ValueLayout.OfShort) Linker.nativeLinker().canonicalLayouts().get("short");
    public static final ValueLayout.OfInt C_INT = (ValueLayout.OfInt) Linker.nativeLinker().canonicalLayouts().get("int");
    public static final ValueLayout.OfLong C_LONG_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get("long long");
    public static final ValueLayout.OfFloat C_FLOAT = (ValueLayout.OfFloat) Linker.nativeLinker().canonicalLayouts().get("float");
    public static final ValueLayout.OfDouble C_DOUBLE = (ValueLayout.OfDouble) Linker.nativeLinker().canonicalLayouts().get("double");
    public static final AddressLayout C_POINTER = ((AddressLayout) Linker.nativeLinker().canonicalLayouts().get("void*"))
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, C_CHAR));
    public static final ValueLayout.OfLong C_LONG = (ValueLayout.OfLong) Linker.nativeLinker().canonicalLayouts().get("long");
    private static final int O_RDWR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define O_RDWR 2
     * }
     */
    public static int O_RDWR() {
        return O_RDWR;
    }
    private static final int O_NONBLOCK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define O_NONBLOCK 4
     * }
     */
    public static int O_NONBLOCK() {
        return O_NONBLOCK;
    }
    private static final int O_CREAT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define O_CREAT 512
     * }
     */
    public static int O_CREAT() {
        return O_CREAT;
    }
    private static final int O_EXCL = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define O_EXCL 2048
     * }
     */
    public static int O_EXCL() {
        return O_EXCL;
    }
    private static final int O_NOCTTY = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define O_NOCTTY 131072
     * }
     */
    public static int O_NOCTTY() {
        return O_NOCTTY;
    }
    private static final int F_SETFL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define F_SETFL 4
     * }
     */
    public static int F_SETFL() {
        return F_SETFL;
    }
    private static final int F_SETOWN = (int)6L;
    /**
     * {@snippet lang=c :
     * #define F_SETOWN 6
     * }
     */
    public static int F_SETOWN() {
        return F_SETOWN;
    }
    private static final int VMIN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define VMIN 16
     * }
     */
    public static int VMIN() {
        return VMIN;
    }
    private static final int VTIME = (int)17L;
    /**
     * {@snippet lang=c :
     * #define VTIME 17
     * }
     */
    public static int VTIME() {
        return VTIME;
    }
    private static final int INPCK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define INPCK 16
     * }
     */
    public static int INPCK() {
        return INPCK;
    }
    private static final int IXON = (int)512L;
    /**
     * {@snippet lang=c :
     * #define IXON 512
     * }
     */
    public static int IXON() {
        return IXON;
    }
    private static final int IXOFF = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define IXOFF 1024
     * }
     */
    public static int IXOFF() {
        return IXOFF;
    }
    private static final int IXANY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define IXANY 2048
     * }
     */
    public static int IXANY() {
        return IXANY;
    }
    private static final int CSIZE = (int)768L;
    /**
     * {@snippet lang=c :
     * #define CSIZE 768
     * }
     */
    public static int CSIZE() {
        return CSIZE;
    }
    private static final int CS5 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CS5 0
     * }
     */
    public static int CS5() {
        return CS5;
    }
    private static final int CS6 = (int)256L;
    /**
     * {@snippet lang=c :
     * #define CS6 256
     * }
     */
    public static int CS6() {
        return CS6;
    }
    private static final int CS7 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define CS7 512
     * }
     */
    public static int CS7() {
        return CS7;
    }
    private static final int CS8 = (int)768L;
    /**
     * {@snippet lang=c :
     * #define CS8 768
     * }
     */
    public static int CS8() {
        return CS8;
    }
    private static final int CSTOPB = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define CSTOPB 1024
     * }
     */
    public static int CSTOPB() {
        return CSTOPB;
    }
    private static final int CREAD = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define CREAD 2048
     * }
     */
    public static int CREAD() {
        return CREAD;
    }
    private static final int PARENB = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PARENB 4096
     * }
     */
    public static int PARENB() {
        return PARENB;
    }
    private static final int PARODD = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define PARODD 8192
     * }
     */
    public static int PARODD() {
        return PARODD;
    }
    private static final int CLOCAL = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define CLOCAL 32768
     * }
     */
    public static int CLOCAL() {
        return CLOCAL;
    }
    private static final int TCSANOW = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TCSANOW 0
     * }
     */
    public static int TCSANOW() {
        return TCSANOW;
    }
    private static final int B0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define B0 0
     * }
     */
    public static int B0() {
        return B0;
    }
    private static final int B50 = (int)50L;
    /**
     * {@snippet lang=c :
     * #define B50 50
     * }
     */
    public static int B50() {
        return B50;
    }
    private static final int B75 = (int)75L;
    /**
     * {@snippet lang=c :
     * #define B75 75
     * }
     */
    public static int B75() {
        return B75;
    }
    private static final int B110 = (int)110L;
    /**
     * {@snippet lang=c :
     * #define B110 110
     * }
     */
    public static int B110() {
        return B110;
    }
    private static final int B134 = (int)134L;
    /**
     * {@snippet lang=c :
     * #define B134 134
     * }
     */
    public static int B134() {
        return B134;
    }
    private static final int B150 = (int)150L;
    /**
     * {@snippet lang=c :
     * #define B150 150
     * }
     */
    public static int B150() {
        return B150;
    }
    private static final int B200 = (int)200L;
    /**
     * {@snippet lang=c :
     * #define B200 200
     * }
     */
    public static int B200() {
        return B200;
    }
    private static final int B300 = (int)300L;
    /**
     * {@snippet lang=c :
     * #define B300 300
     * }
     */
    public static int B300() {
        return B300;
    }
    private static final int B600 = (int)600L;
    /**
     * {@snippet lang=c :
     * #define B600 600
     * }
     */
    public static int B600() {
        return B600;
    }
    private static final int B1200 = (int)1200L;
    /**
     * {@snippet lang=c :
     * #define B1200 1200
     * }
     */
    public static int B1200() {
        return B1200;
    }
    private static final int B1800 = (int)1800L;
    /**
     * {@snippet lang=c :
     * #define B1800 1800
     * }
     */
    public static int B1800() {
        return B1800;
    }
    private static final int B2400 = (int)2400L;
    /**
     * {@snippet lang=c :
     * #define B2400 2400
     * }
     */
    public static int B2400() {
        return B2400;
    }
    private static final int B4800 = (int)4800L;
    /**
     * {@snippet lang=c :
     * #define B4800 4800
     * }
     */
    public static int B4800() {
        return B4800;
    }
    private static final int B9600 = (int)9600L;
    /**
     * {@snippet lang=c :
     * #define B9600 9600
     * }
     */
    public static int B9600() {
        return B9600;
    }
    private static final int B19200 = (int)19200L;
    /**
     * {@snippet lang=c :
     * #define B19200 19200
     * }
     */
    public static int B19200() {
        return B19200;
    }
    private static final int B38400 = (int)38400L;
    /**
     * {@snippet lang=c :
     * #define B38400 38400
     * }
     */
    public static int B38400() {
        return B38400;
    }
    private static final int B57600 = (int)57600L;
    /**
     * {@snippet lang=c :
     * #define B57600 57600
     * }
     */
    public static int B57600() {
        return B57600;
    }
    private static final int B115200 = (int)115200L;
    /**
     * {@snippet lang=c :
     * #define B115200 115200
     * }
     */
    public static int B115200() {
        return B115200;
    }
    private static final int B230400 = (int)230400L;
    /**
     * {@snippet lang=c :
     * #define B230400 230400
     * }
     */
    public static int B230400() {
        return B230400;
    }
    private static final int TIOCM_DTR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_DTR 2
     * }
     */
    public static int TIOCM_DTR() {
        return TIOCM_DTR;
    }
    private static final int TIOCM_RTS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_RTS 4
     * }
     */
    public static int TIOCM_RTS() {
        return TIOCM_RTS;
    }
    private static final int TIOCM_CTS = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_CTS 32
     * }
     */
    public static int TIOCM_CTS() {
        return TIOCM_CTS;
    }
    private static final int TIOCM_CAR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_CAR 64
     * }
     */
    public static int TIOCM_CAR() {
        return TIOCM_CAR;
    }
    private static final int TIOCM_RNG = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_RNG 128
     * }
     */
    public static int TIOCM_RNG() {
        return TIOCM_RNG;
    }
    private static final int TIOCM_DSR = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_DSR 256
     * }
     */
    public static int TIOCM_DSR() {
        return TIOCM_DSR;
    }
    private static final int EPERM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return EPERM;
    }
    private static final int ENOENT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return ENOENT;
    }
    private static final int EINTR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return EINTR;
    }
    private static final int EBADF = (int)9L;
    /**
     * {@snippet lang=c :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return EBADF;
    }
    private static final int EACCES = (int)13L;
    /**
     * {@snippet lang=c :
     * #define EACCES 13
     * }
     */
    public static int EACCES() {
        return EACCES;
    }
    private static final int EBUSY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return EBUSY;
    }
    private static final int EAGAIN = (int)35L;
    /**
     * {@snippet lang=c :
     * #define EAGAIN 35
     * }
     */
    public static int EAGAIN() {
        return EAGAIN;
    }
    private static final int PATH_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define PATH_MAX 1024
     * }
     */
    public static int PATH_MAX() {
        return PATH_MAX;
    }

    private static class close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_INT
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int close(int)
     * }
     */
    public static FunctionDescriptor close$descriptor() {
        return close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int close(int)
     * }
     */
    public static MethodHandle close$handle() {
        return close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int close(int)
     * }
     */
    public static MemorySegment close$address() {
        return close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int close(int)
     * }
     */
    public static int close(int x0) {
        var mh$ = close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("close", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT    );

        public static final MemorySegment ADDR = Mac.findOrThrow("getpid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * pid_t getpid()
     * }
     */
    public static FunctionDescriptor getpid$descriptor() {
        return getpid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * pid_t getpid()
     * }
     */
    public static MethodHandle getpid$handle() {
        return getpid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * pid_t getpid()
     * }
     */
    public static MemorySegment getpid$address() {
        return getpid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * pid_t getpid()
     * }
     */
    public static int getpid() {
        var mh$ = getpid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("link");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int link(const char *, const char *)
     * }
     */
    public static FunctionDescriptor link$descriptor() {
        return link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int link(const char *, const char *)
     * }
     */
    public static MethodHandle link$handle() {
        return link.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int link(const char *, const char *)
     * }
     */
    public static MemorySegment link$address() {
        return link.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int link(const char *, const char *)
     * }
     */
    public static int link(MemorySegment x0, MemorySegment x1) {
        var mh$ = link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("link", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_LONG,
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_LONG
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t read(int, void *, size_t)
     * }
     */
    public static FunctionDescriptor read$descriptor() {
        return read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t read(int, void *, size_t)
     * }
     */
    public static MethodHandle read$handle() {
        return read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t read(int, void *, size_t)
     * }
     */
    public static MemorySegment read$address() {
        return read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t read(int, void *, size_t)
     * }
     */
    public static long read(int x0, MemorySegment x1, long x2) {
        var mh$ = read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("read", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class unlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("unlink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int unlink(const char *)
     * }
     */
    public static FunctionDescriptor unlink$descriptor() {
        return unlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int unlink(const char *)
     * }
     */
    public static MethodHandle unlink$handle() {
        return unlink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int unlink(const char *)
     * }
     */
    public static MemorySegment unlink$address() {
        return unlink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int unlink(const char *)
     * }
     */
    public static int unlink(MemorySegment x0) {
        var mh$ = unlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("unlink", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_LONG,
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_LONG
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t write(int __fd, const void *__buf, size_t __nbyte)
     * }
     */
    public static FunctionDescriptor write$descriptor() {
        return write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t write(int __fd, const void *__buf, size_t __nbyte)
     * }
     */
    public static MethodHandle write$handle() {
        return write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t write(int __fd, const void *__buf, size_t __nbyte)
     * }
     */
    public static MemorySegment write$address() {
        return write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t write(int __fd, const void *__buf, size_t __nbyte)
     * }
     */
    public static long write(int __fd, MemorySegment __buf, long __nbyte) {
        var mh$ = write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("write", __fd, __buf, __nbyte);
            }
            return (long)mh$.invokeExact(__fd, __buf, __nbyte);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_POINTER,
            Mac.C_POINTER,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("select$1050");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int select(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int select(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int select(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int select(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)
     * }
     */
    public static int select(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("stat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static FunctionDescriptor stat$descriptor() {
        return stat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static MethodHandle stat$handle() {
        return stat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static MemorySegment stat$address() {
        return stat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static int stat(MemorySegment x0, MemorySegment x1) {
        var mh$ = stat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int open(const char *, int, ...)
     * }
     */
    public static class open {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Mac.C_INT,
                Mac.C_POINTER,
                Mac.C_INT
            );
        private static final MemorySegment ADDR = Mac.findOrThrow("open");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private open(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int open(const char *, int, ...)
         * }
         */
        public static open makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new open(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("open", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fcntl(int, int, ...)
     * }
     */
    public static class fcntl {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Mac.C_INT,
                Mac.C_INT,
                Mac.C_INT
            );
        private static final MemorySegment ADDR = Mac.findOrThrow("fcntl");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fcntl(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fcntl(int, int, ...)
         * }
         */
        public static fcntl makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fcntl(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int x0, int x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fcntl", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class cfgetispeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_LONG,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("cfgetispeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static FunctionDescriptor cfgetispeed$descriptor() {
        return cfgetispeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static MethodHandle cfgetispeed$handle() {
        return cfgetispeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static MemorySegment cfgetispeed$address() {
        return cfgetispeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static long cfgetispeed(MemorySegment x0) {
        var mh$ = cfgetispeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfgetispeed", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfsetispeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_LONG
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("cfsetispeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static FunctionDescriptor cfsetispeed$descriptor() {
        return cfsetispeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static MethodHandle cfsetispeed$handle() {
        return cfsetispeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static MemorySegment cfsetispeed$address() {
        return cfsetispeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static int cfsetispeed(MemorySegment x0, long x1) {
        var mh$ = cfsetispeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfsetispeed", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfsetospeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_POINTER,
            Mac.C_LONG
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("cfsetospeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static FunctionDescriptor cfsetospeed$descriptor() {
        return cfsetospeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static MethodHandle cfsetospeed$handle() {
        return cfsetospeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static MemorySegment cfsetospeed$address() {
        return cfsetospeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static int cfsetospeed(MemorySegment x0, long x1) {
        var mh$ = cfsetospeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfsetospeed", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcgetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_INT,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("tcgetattr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static FunctionDescriptor tcgetattr$descriptor() {
        return tcgetattr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static MethodHandle tcgetattr$handle() {
        return tcgetattr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static MemorySegment tcgetattr$address() {
        return tcgetattr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static int tcgetattr(int x0, MemorySegment x1) {
        var mh$ = tcgetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcgetattr", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcsetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_INT,
            Mac.C_INT,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("tcsetattr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static FunctionDescriptor tcsetattr$descriptor() {
        return tcsetattr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static MethodHandle tcsetattr$handle() {
        return tcsetattr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static MemorySegment tcsetattr$address() {
        return tcsetattr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static int tcsetattr(int x0, int x1, MemorySegment x2) {
        var mh$ = tcsetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcsetattr", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcdrain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_INT
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("tcdrain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static FunctionDescriptor tcdrain$descriptor() {
        return tcdrain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static MethodHandle tcdrain$handle() {
        return tcdrain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static MemorySegment tcdrain$address() {
        return tcdrain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static int tcdrain(int x0) {
        var mh$ = tcdrain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcdrain", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int ioctl(int, unsigned long, ...)
     * }
     */
    public static class ioctl {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Mac.C_INT,
                Mac.C_INT,
                Mac.C_LONG
            );
        private static final MemorySegment ADDR = Mac.findOrThrow("ioctl");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ioctl(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int ioctl(int, unsigned long, ...)
         * }
         */
        public static ioctl makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ioctl(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int x0, long x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ioctl", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_POINTER,
            Mac.C_INT
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("strerror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *strerror(int __errnum)
     * }
     */
    public static FunctionDescriptor strerror$descriptor() {
        return strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *strerror(int __errnum)
     * }
     */
    public static MethodHandle strerror$handle() {
        return strerror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *strerror(int __errnum)
     * }
     */
    public static MemorySegment strerror$address() {
        return strerror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *strerror(int __errnum)
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror", __errnum);
            }
            return (MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_LONG,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("strlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long strlen(const char *__s)
     * }
     */
    public static FunctionDescriptor strlen$descriptor() {
        return strlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long strlen(const char *__s)
     * }
     */
    public static MethodHandle strlen$handle() {
        return strlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long strlen(const char *__s)
     * }
     */
    public static MemorySegment strlen$address() {
        return strlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long strlen(const char *__s)
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strlen", __s);
            }
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_POINTER    );

        public static final MemorySegment ADDR = Mac.findOrThrow("__error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static FunctionDescriptor __error$descriptor() {
        return __error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MethodHandle __error$handle() {
        return __error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MemorySegment __error$address() {
        return __error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MemorySegment __error() {
        var mh$ = __error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__error");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class kill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_INT,
            Mac.C_INT
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("kill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int kill(pid_t, int)
     * }
     */
    public static FunctionDescriptor kill$descriptor() {
        return kill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int kill(pid_t, int)
     * }
     */
    public static MethodHandle kill$handle() {
        return kill.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int kill(pid_t, int)
     * }
     */
    public static MemorySegment kill$address() {
        return kill.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int kill(pid_t, int)
     * }
     */
    public static int kill(int x0, int x1) {
        var mh$ = kill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("kill", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class closedir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_INT,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("closedir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int closedir(DIR *)
     * }
     */
    public static FunctionDescriptor closedir$descriptor() {
        return closedir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int closedir(DIR *)
     * }
     */
    public static MethodHandle closedir$handle() {
        return closedir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int closedir(DIR *)
     * }
     */
    public static MemorySegment closedir$address() {
        return closedir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int closedir(DIR *)
     * }
     */
    public static int closedir(MemorySegment x0) {
        var mh$ = closedir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("closedir", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class opendir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_POINTER,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("opendir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DIR *opendir(const char *)
     * }
     */
    public static FunctionDescriptor opendir$descriptor() {
        return opendir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DIR *opendir(const char *)
     * }
     */
    public static MethodHandle opendir$handle() {
        return opendir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DIR *opendir(const char *)
     * }
     */
    public static MemorySegment opendir$address() {
        return opendir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DIR *opendir(const char *)
     * }
     */
    public static MemorySegment opendir(MemorySegment x0) {
        var mh$ = opendir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opendir", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class readdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_POINTER,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("readdir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct dirent *readdir(DIR *)
     * }
     */
    public static FunctionDescriptor readdir$descriptor() {
        return readdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct dirent *readdir(DIR *)
     * }
     */
    public static MethodHandle readdir$handle() {
        return readdir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct dirent *readdir(DIR *)
     * }
     */
    public static MemorySegment readdir$address() {
        return readdir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct dirent *readdir(DIR *)
     * }
     */
    public static MemorySegment readdir(MemorySegment x0) {
        var mh$ = readdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readdir", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Mac.C_POINTER,
            Mac.C_POINTER,
            Mac.C_POINTER
        );

        public static final MemorySegment ADDR = Mac.findOrThrow("realpath$DARWIN_EXTSN");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *realpath(const char *restrict, char *restrict)
     * }
     */
    public static FunctionDescriptor realpath$descriptor() {
        return realpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *realpath(const char *restrict, char *restrict)
     * }
     */
    public static MethodHandle realpath$handle() {
        return realpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *realpath(const char *restrict, char *restrict)
     * }
     */
    public static MemorySegment realpath$address() {
        return realpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *realpath(const char *restrict, char *restrict)
     * }
     */
    public static MemorySegment realpath(MemorySegment x0, MemorySegment x1) {
        var mh$ = realpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realpath", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int CRTSCTS = (int)196608L;
    /**
     * {@snippet lang=c :
     * #define CRTSCTS 196608
     * }
     */
    public static int CRTSCTS() {
        return CRTSCTS;
    }
    private static final int TIOCEXCL = (int)536900621L;
    /**
     * {@snippet lang=c :
     * #define TIOCEXCL 536900621
     * }
     */
    public static int TIOCEXCL() {
        return TIOCEXCL;
    }
    private static final long TIOCMSET = 2147775597L;
    /**
     * {@snippet lang=c :
     * #define TIOCMSET 2147775597
     * }
     */
    public static long TIOCMSET() {
        return TIOCMSET;
    }
    private static final long TIOCMGET = 1074033770L;
    /**
     * {@snippet lang=c :
     * #define TIOCMGET 1074033770
     * }
     */
    public static long TIOCMGET() {
        return TIOCMGET;
    }
    private static final long FIONREAD = 1074030207L;
    /**
     * {@snippet lang=c :
     * #define FIONREAD 1074030207
     * }
     */
    public static long FIONREAD() {
        return FIONREAD;
    }
    private static final int EWOULDBLOCK = (int)35L;
    /**
     * {@snippet lang=c :
     * #define EWOULDBLOCK 35
     * }
     */
    public static int EWOULDBLOCK() {
        return EWOULDBLOCK;
    }
}

