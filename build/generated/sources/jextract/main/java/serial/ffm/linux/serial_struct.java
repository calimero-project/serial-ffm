// Generated by jextract

package serial.ffm.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct serial_struct {
 *     int type;
 *     int line;
 *     unsigned int port;
 *     int irq;
 *     int flags;
 *     int xmit_fifo_size;
 *     int custom_divisor;
 *     int baud_base;
 *     unsigned short close_delay;
 *     char io_type;
 *     char reserved_char[1];
 *     int hub6;
 *     unsigned short closing_wait;
 *     unsigned short closing_wait2;
 *     unsigned char *iomem_base;
 *     unsigned short iomem_reg_shift;
 *     unsigned int port_high;
 *     unsigned long iomap_base;
 * }
 * }
 */
public class serial_struct {

    serial_struct() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Linux.C_INT.withName("type"),
        Linux.C_INT.withName("line"),
        Linux.C_INT.withName("port"),
        Linux.C_INT.withName("irq"),
        Linux.C_INT.withName("flags"),
        Linux.C_INT.withName("xmit_fifo_size"),
        Linux.C_INT.withName("custom_divisor"),
        Linux.C_INT.withName("baud_base"),
        Linux.C_SHORT.withName("close_delay"),
        Linux.C_CHAR.withName("io_type"),
        MemoryLayout.sequenceLayout(1, Linux.C_CHAR).withName("reserved_char"),
        Linux.C_INT.withName("hub6"),
        Linux.C_SHORT.withName("closing_wait"),
        Linux.C_SHORT.withName("closing_wait2"),
        MemoryLayout.paddingLayout(4),
        Linux.C_POINTER.withName("iomem_base"),
        Linux.C_SHORT.withName("iomem_reg_shift"),
        MemoryLayout.paddingLayout(2),
        Linux.C_INT.withName("port_high"),
        Linux.C_LONG.withName("iomap_base")
    ).withName("serial_struct");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = $LAYOUT.byteOffset(groupElement("type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int line
     * }
     */
    public static final OfInt line$layout() {
        return line$LAYOUT;
    }

    private static final long line$OFFSET = $LAYOUT.byteOffset(groupElement("line"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int line
     * }
     */
    public static final long line$offset() {
        return line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int line
     * }
     */
    public static int line(MemorySegment struct) {
        return struct.get(line$LAYOUT, line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int line
     * }
     */
    public static void line(MemorySegment struct, int fieldValue) {
        struct.set(line$LAYOUT, line$OFFSET, fieldValue);
    }

    private static final OfInt port$LAYOUT = (OfInt)$LAYOUT.select(groupElement("port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int port
     * }
     */
    public static final OfInt port$layout() {
        return port$LAYOUT;
    }

    private static final long port$OFFSET = $LAYOUT.byteOffset(groupElement("port"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int port
     * }
     */
    public static final long port$offset() {
        return port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int port
     * }
     */
    public static int port(MemorySegment struct) {
        return struct.get(port$LAYOUT, port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int port
     * }
     */
    public static void port(MemorySegment struct, int fieldValue) {
        struct.set(port$LAYOUT, port$OFFSET, fieldValue);
    }

    private static final OfInt irq$LAYOUT = (OfInt)$LAYOUT.select(groupElement("irq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int irq
     * }
     */
    public static final OfInt irq$layout() {
        return irq$LAYOUT;
    }

    private static final long irq$OFFSET = $LAYOUT.byteOffset(groupElement("irq"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int irq
     * }
     */
    public static final long irq$offset() {
        return irq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int irq
     * }
     */
    public static int irq(MemorySegment struct) {
        return struct.get(irq$LAYOUT, irq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int irq
     * }
     */
    public static void irq(MemorySegment struct, int fieldValue) {
        struct.set(irq$LAYOUT, irq$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = $LAYOUT.byteOffset(groupElement("flags"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt xmit_fifo_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xmit_fifo_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int xmit_fifo_size
     * }
     */
    public static final OfInt xmit_fifo_size$layout() {
        return xmit_fifo_size$LAYOUT;
    }

    private static final long xmit_fifo_size$OFFSET = $LAYOUT.byteOffset(groupElement("xmit_fifo_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int xmit_fifo_size
     * }
     */
    public static final long xmit_fifo_size$offset() {
        return xmit_fifo_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int xmit_fifo_size
     * }
     */
    public static int xmit_fifo_size(MemorySegment struct) {
        return struct.get(xmit_fifo_size$LAYOUT, xmit_fifo_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int xmit_fifo_size
     * }
     */
    public static void xmit_fifo_size(MemorySegment struct, int fieldValue) {
        struct.set(xmit_fifo_size$LAYOUT, xmit_fifo_size$OFFSET, fieldValue);
    }

    private static final OfInt custom_divisor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("custom_divisor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int custom_divisor
     * }
     */
    public static final OfInt custom_divisor$layout() {
        return custom_divisor$LAYOUT;
    }

    private static final long custom_divisor$OFFSET = $LAYOUT.byteOffset(groupElement("custom_divisor"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int custom_divisor
     * }
     */
    public static final long custom_divisor$offset() {
        return custom_divisor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int custom_divisor
     * }
     */
    public static int custom_divisor(MemorySegment struct) {
        return struct.get(custom_divisor$LAYOUT, custom_divisor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int custom_divisor
     * }
     */
    public static void custom_divisor(MemorySegment struct, int fieldValue) {
        struct.set(custom_divisor$LAYOUT, custom_divisor$OFFSET, fieldValue);
    }

    private static final OfInt baud_base$LAYOUT = (OfInt)$LAYOUT.select(groupElement("baud_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int baud_base
     * }
     */
    public static final OfInt baud_base$layout() {
        return baud_base$LAYOUT;
    }

    private static final long baud_base$OFFSET = $LAYOUT.byteOffset(groupElement("baud_base"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int baud_base
     * }
     */
    public static final long baud_base$offset() {
        return baud_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int baud_base
     * }
     */
    public static int baud_base(MemorySegment struct) {
        return struct.get(baud_base$LAYOUT, baud_base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int baud_base
     * }
     */
    public static void baud_base(MemorySegment struct, int fieldValue) {
        struct.set(baud_base$LAYOUT, baud_base$OFFSET, fieldValue);
    }

    private static final OfShort close_delay$LAYOUT = (OfShort)$LAYOUT.select(groupElement("close_delay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short close_delay
     * }
     */
    public static final OfShort close_delay$layout() {
        return close_delay$LAYOUT;
    }

    private static final long close_delay$OFFSET = $LAYOUT.byteOffset(groupElement("close_delay"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short close_delay
     * }
     */
    public static final long close_delay$offset() {
        return close_delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short close_delay
     * }
     */
    public static short close_delay(MemorySegment struct) {
        return struct.get(close_delay$LAYOUT, close_delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short close_delay
     * }
     */
    public static void close_delay(MemorySegment struct, short fieldValue) {
        struct.set(close_delay$LAYOUT, close_delay$OFFSET, fieldValue);
    }

    private static final OfByte io_type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("io_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char io_type
     * }
     */
    public static final OfByte io_type$layout() {
        return io_type$LAYOUT;
    }

    private static final long io_type$OFFSET = $LAYOUT.byteOffset(groupElement("io_type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char io_type
     * }
     */
    public static final long io_type$offset() {
        return io_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char io_type
     * }
     */
    public static byte io_type(MemorySegment struct) {
        return struct.get(io_type$LAYOUT, io_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char io_type
     * }
     */
    public static void io_type(MemorySegment struct, byte fieldValue) {
        struct.set(io_type$LAYOUT, io_type$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved_char$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved_char"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static final SequenceLayout reserved_char$layout() {
        return reserved_char$LAYOUT;
    }

    private static final long reserved_char$OFFSET = $LAYOUT.byteOffset(groupElement("reserved_char"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static final long reserved_char$offset() {
        return reserved_char$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static MemorySegment reserved_char(MemorySegment struct) {
        return struct.asSlice(reserved_char$OFFSET, reserved_char$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static void reserved_char(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved_char$OFFSET, reserved_char$LAYOUT.byteSize());
    }

    private static long[] reserved_char$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static long[] reserved_char$dimensions() {
        return reserved_char$DIMS;
    }
    private static final VarHandle reserved_char$ELEM_HANDLE = reserved_char$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static byte reserved_char(MemorySegment struct, long index0) {
        return (byte)reserved_char$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char reserved_char[1]
     * }
     */
    public static void reserved_char(MemorySegment struct, long index0, byte fieldValue) {
        reserved_char$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt hub6$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hub6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int hub6
     * }
     */
    public static final OfInt hub6$layout() {
        return hub6$LAYOUT;
    }

    private static final long hub6$OFFSET = $LAYOUT.byteOffset(groupElement("hub6"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int hub6
     * }
     */
    public static final long hub6$offset() {
        return hub6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int hub6
     * }
     */
    public static int hub6(MemorySegment struct) {
        return struct.get(hub6$LAYOUT, hub6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int hub6
     * }
     */
    public static void hub6(MemorySegment struct, int fieldValue) {
        struct.set(hub6$LAYOUT, hub6$OFFSET, fieldValue);
    }

    private static final OfShort closing_wait$LAYOUT = (OfShort)$LAYOUT.select(groupElement("closing_wait"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short closing_wait
     * }
     */
    public static final OfShort closing_wait$layout() {
        return closing_wait$LAYOUT;
    }

    private static final long closing_wait$OFFSET = $LAYOUT.byteOffset(groupElement("closing_wait"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short closing_wait
     * }
     */
    public static final long closing_wait$offset() {
        return closing_wait$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short closing_wait
     * }
     */
    public static short closing_wait(MemorySegment struct) {
        return struct.get(closing_wait$LAYOUT, closing_wait$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short closing_wait
     * }
     */
    public static void closing_wait(MemorySegment struct, short fieldValue) {
        struct.set(closing_wait$LAYOUT, closing_wait$OFFSET, fieldValue);
    }

    private static final OfShort closing_wait2$LAYOUT = (OfShort)$LAYOUT.select(groupElement("closing_wait2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short closing_wait2
     * }
     */
    public static final OfShort closing_wait2$layout() {
        return closing_wait2$LAYOUT;
    }

    private static final long closing_wait2$OFFSET = $LAYOUT.byteOffset(groupElement("closing_wait2"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short closing_wait2
     * }
     */
    public static final long closing_wait2$offset() {
        return closing_wait2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short closing_wait2
     * }
     */
    public static short closing_wait2(MemorySegment struct) {
        return struct.get(closing_wait2$LAYOUT, closing_wait2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short closing_wait2
     * }
     */
    public static void closing_wait2(MemorySegment struct, short fieldValue) {
        struct.set(closing_wait2$LAYOUT, closing_wait2$OFFSET, fieldValue);
    }

    private static final AddressLayout iomem_base$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iomem_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *iomem_base
     * }
     */
    public static final AddressLayout iomem_base$layout() {
        return iomem_base$LAYOUT;
    }

    private static final long iomem_base$OFFSET = $LAYOUT.byteOffset(groupElement("iomem_base"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *iomem_base
     * }
     */
    public static final long iomem_base$offset() {
        return iomem_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *iomem_base
     * }
     */
    public static MemorySegment iomem_base(MemorySegment struct) {
        return struct.get(iomem_base$LAYOUT, iomem_base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *iomem_base
     * }
     */
    public static void iomem_base(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iomem_base$LAYOUT, iomem_base$OFFSET, fieldValue);
    }

    private static final OfShort iomem_reg_shift$LAYOUT = (OfShort)$LAYOUT.select(groupElement("iomem_reg_shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short iomem_reg_shift
     * }
     */
    public static final OfShort iomem_reg_shift$layout() {
        return iomem_reg_shift$LAYOUT;
    }

    private static final long iomem_reg_shift$OFFSET = $LAYOUT.byteOffset(groupElement("iomem_reg_shift"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short iomem_reg_shift
     * }
     */
    public static final long iomem_reg_shift$offset() {
        return iomem_reg_shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short iomem_reg_shift
     * }
     */
    public static short iomem_reg_shift(MemorySegment struct) {
        return struct.get(iomem_reg_shift$LAYOUT, iomem_reg_shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short iomem_reg_shift
     * }
     */
    public static void iomem_reg_shift(MemorySegment struct, short fieldValue) {
        struct.set(iomem_reg_shift$LAYOUT, iomem_reg_shift$OFFSET, fieldValue);
    }

    private static final OfInt port_high$LAYOUT = (OfInt)$LAYOUT.select(groupElement("port_high"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int port_high
     * }
     */
    public static final OfInt port_high$layout() {
        return port_high$LAYOUT;
    }

    private static final long port_high$OFFSET = $LAYOUT.byteOffset(groupElement("port_high"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int port_high
     * }
     */
    public static final long port_high$offset() {
        return port_high$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int port_high
     * }
     */
    public static int port_high(MemorySegment struct) {
        return struct.get(port_high$LAYOUT, port_high$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int port_high
     * }
     */
    public static void port_high(MemorySegment struct, int fieldValue) {
        struct.set(port_high$LAYOUT, port_high$OFFSET, fieldValue);
    }

    private static final OfLong iomap_base$LAYOUT = (OfLong)$LAYOUT.select(groupElement("iomap_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long iomap_base
     * }
     */
    public static final OfLong iomap_base$layout() {
        return iomap_base$LAYOUT;
    }

    private static final long iomap_base$OFFSET = $LAYOUT.byteOffset(groupElement("iomap_base"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long iomap_base
     * }
     */
    public static final long iomap_base$offset() {
        return iomap_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long iomap_base
     * }
     */
    public static long iomap_base(MemorySegment struct) {
        return struct.get(iomap_base$LAYOUT, iomap_base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long iomap_base
     * }
     */
    public static void iomap_base(MemorySegment struct, long fieldValue) {
        struct.set(iomap_base$LAYOUT, iomap_base$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

