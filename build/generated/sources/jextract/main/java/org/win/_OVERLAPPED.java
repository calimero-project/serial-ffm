// Generated by jextract

package org.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _OVERLAPPED {
 *     ULONG_PTR Internal;
 *     ULONG_PTR InternalHigh;
 *     union {
 *         struct O {
 *             DWORD Offset;
 *             DWORD OffsetHigh;
 *         };
 *         PVOID Pointer;
 *     };
 *     HANDLE hEvent;
 * }
 * }
 */
public class _OVERLAPPED {

    _OVERLAPPED() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows.C_LONG_LONG.withName("Internal"),
        Windows.C_LONG_LONG.withName("InternalHigh"),
        MemoryLayout.paddingLayout(8),
        Windows.C_POINTER.withName("hEvent")
    ).withName("_OVERLAPPED");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Internal$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR Internal
     * }
     */
    public static final OfLong Internal$layout() {
        return Internal$LAYOUT;
    }

    private static final long Internal$OFFSET = $LAYOUT.byteOffset(groupElement("Internal"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR Internal
     * }
     */
    public static final long Internal$offset() {
        return Internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR Internal
     * }
     */
    public static long Internal(MemorySegment struct) {
        return struct.get(Internal$LAYOUT, Internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR Internal
     * }
     */
    public static void Internal(MemorySegment struct, long fieldValue) {
        struct.set(Internal$LAYOUT, Internal$OFFSET, fieldValue);
    }

    private static final OfLong InternalHigh$LAYOUT = (OfLong)$LAYOUT.select(groupElement("InternalHigh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR InternalHigh
     * }
     */
    public static final OfLong InternalHigh$layout() {
        return InternalHigh$LAYOUT;
    }

    private static final long InternalHigh$OFFSET = $LAYOUT.byteOffset(groupElement("InternalHigh"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR InternalHigh
     * }
     */
    public static final long InternalHigh$offset() {
        return InternalHigh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR InternalHigh
     * }
     */
    public static long InternalHigh(MemorySegment struct) {
        return struct.get(InternalHigh$LAYOUT, InternalHigh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR InternalHigh
     * }
     */
    public static void InternalHigh(MemorySegment struct, long fieldValue) {
        struct.set(InternalHigh$LAYOUT, InternalHigh$OFFSET, fieldValue);
    }

    private static final AddressLayout hEvent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hEvent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static final AddressLayout hEvent$layout() {
        return hEvent$LAYOUT;
    }

    private static final long hEvent$OFFSET = $LAYOUT.byteOffset(groupElement("hEvent"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static final long hEvent$offset() {
        return hEvent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static MemorySegment hEvent(MemorySegment struct) {
        return struct.get(hEvent$LAYOUT, hEvent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static void hEvent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hEvent$LAYOUT, hEvent$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
