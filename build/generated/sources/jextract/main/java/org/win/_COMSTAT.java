// Generated by jextract

package org.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _COMSTAT {
 *      *     unsigned long fCtsHold;
 *     unsigned long fDsrHold;
 *     unsigned long fRlsdHold;
 *     unsigned long fXoffHold;
 *     unsigned long fXoffSent;
 *     unsigned long fEof;
 *     unsigned long fTxim;
 *     unsigned long fReserved;
 *     unsigned long cbInQue;
 *     unsigned long cbOutQue;
 * };
 * }
 */
public class _COMSTAT {

    public static MemoryLayout $LAYOUT() {
        return constants$7.const$0;
    }
    public static VarHandle cbInQue$VH() {
        return constants$7.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long cbInQue;
     * }
     */
    public static int cbInQue$get(MemorySegment seg) {
        return (int)constants$7.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long cbInQue;
     * }
     */
    public static void cbInQue$set(MemorySegment seg, int x) {
        constants$7.const$1.set(seg, 0L, x);
    }
    public static int cbInQue$get(MemorySegment seg, long index) {
        return (int)constants$7.const$1.get(seg, index * sizeof());    }
    public static void cbInQue$set(MemorySegment seg, long index, int x) {
        constants$7.const$1.set(seg, index * sizeof(), x);
    }
    public static VarHandle cbOutQue$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long cbOutQue;
     * }
     */
    public static int cbOutQue$get(MemorySegment seg) {
        return (int)constants$7.const$2.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long cbOutQue;
     * }
     */
    public static void cbOutQue$set(MemorySegment seg, int x) {
        constants$7.const$2.set(seg, 0L, x);
    }
    public static int cbOutQue$get(MemorySegment seg, long index) {
        return (int)constants$7.const$2.get(seg, index * sizeof());    }
    public static void cbOutQue$set(MemorySegment seg, long index, int x) {
        constants$7.const$2.set(seg, index * sizeof(), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


