// Generated by jextract

package org.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _COMMTIMEOUTS {
 *     DWORD ReadIntervalTimeout;
 *     DWORD ReadTotalTimeoutMultiplier;
 *     DWORD ReadTotalTimeoutConstant;
 *     DWORD WriteTotalTimeoutMultiplier;
 *     DWORD WriteTotalTimeoutConstant;
 * }
 * }
 */
public class _COMMTIMEOUTS {

    _COMMTIMEOUTS() {
        // Suppresses public default constructor, ensuring non-instantiability,
        // but allows generated subclasses in same package.
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows.C_LONG.withName("ReadIntervalTimeout"),
        Windows.C_LONG.withName("ReadTotalTimeoutMultiplier"),
        Windows.C_LONG.withName("ReadTotalTimeoutConstant"),
        Windows.C_LONG.withName("WriteTotalTimeoutMultiplier"),
        Windows.C_LONG.withName("WriteTotalTimeoutConstant")
    ).withName("_COMMTIMEOUTS");

    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final long ReadIntervalTimeout$OFFSET = 0;
    private static final OfInt ReadIntervalTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReadIntervalTimeout"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ReadIntervalTimeout
     * }
     */
    public static int ReadIntervalTimeout(MemorySegment struct) {
        return struct.get(ReadIntervalTimeout$LAYOUT, ReadIntervalTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ReadIntervalTimeout
     * }
     */
    public static void ReadIntervalTimeout(MemorySegment struct, int fieldValue) {
        struct.set(ReadIntervalTimeout$LAYOUT, ReadIntervalTimeout$OFFSET, fieldValue);
    }

    private static final long ReadTotalTimeoutMultiplier$OFFSET = 4;
    private static final OfInt ReadTotalTimeoutMultiplier$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReadTotalTimeoutMultiplier"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ReadTotalTimeoutMultiplier
     * }
     */
    public static int ReadTotalTimeoutMultiplier(MemorySegment struct) {
        return struct.get(ReadTotalTimeoutMultiplier$LAYOUT, ReadTotalTimeoutMultiplier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ReadTotalTimeoutMultiplier
     * }
     */
    public static void ReadTotalTimeoutMultiplier(MemorySegment struct, int fieldValue) {
        struct.set(ReadTotalTimeoutMultiplier$LAYOUT, ReadTotalTimeoutMultiplier$OFFSET, fieldValue);
    }

    private static final long ReadTotalTimeoutConstant$OFFSET = 8;
    private static final OfInt ReadTotalTimeoutConstant$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReadTotalTimeoutConstant"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ReadTotalTimeoutConstant
     * }
     */
    public static int ReadTotalTimeoutConstant(MemorySegment struct) {
        return struct.get(ReadTotalTimeoutConstant$LAYOUT, ReadTotalTimeoutConstant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ReadTotalTimeoutConstant
     * }
     */
    public static void ReadTotalTimeoutConstant(MemorySegment struct, int fieldValue) {
        struct.set(ReadTotalTimeoutConstant$LAYOUT, ReadTotalTimeoutConstant$OFFSET, fieldValue);
    }

    private static final long WriteTotalTimeoutMultiplier$OFFSET = 12;
    private static final OfInt WriteTotalTimeoutMultiplier$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WriteTotalTimeoutMultiplier"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD WriteTotalTimeoutMultiplier
     * }
     */
    public static int WriteTotalTimeoutMultiplier(MemorySegment struct) {
        return struct.get(WriteTotalTimeoutMultiplier$LAYOUT, WriteTotalTimeoutMultiplier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD WriteTotalTimeoutMultiplier
     * }
     */
    public static void WriteTotalTimeoutMultiplier(MemorySegment struct, int fieldValue) {
        struct.set(WriteTotalTimeoutMultiplier$LAYOUT, WriteTotalTimeoutMultiplier$OFFSET, fieldValue);
    }

    private static final long WriteTotalTimeoutConstant$OFFSET = 16;
    private static final OfInt WriteTotalTimeoutConstant$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WriteTotalTimeoutConstant"));

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD WriteTotalTimeoutConstant
     * }
     */
    public static int WriteTotalTimeoutConstant(MemorySegment struct) {
        return struct.get(WriteTotalTimeoutConstant$LAYOUT, WriteTotalTimeoutConstant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD WriteTotalTimeoutConstant
     * }
     */
    public static void WriteTotalTimeoutConstant(MemorySegment struct, int fieldValue) {
        struct.set(WriteTotalTimeoutConstant$LAYOUT, WriteTotalTimeoutConstant$OFFSET, fieldValue);
    }

    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    public static long sizeof() { return layout().byteSize(); }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

