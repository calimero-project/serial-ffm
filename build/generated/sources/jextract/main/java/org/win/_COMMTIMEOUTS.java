// Generated by jextract

package org.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _COMMTIMEOUTS {
 *     unsigned long ReadIntervalTimeout;
 *     unsigned long ReadTotalTimeoutMultiplier;
 *     unsigned long ReadTotalTimeoutConstant;
 *     unsigned long WriteTotalTimeoutMultiplier;
 *     unsigned long WriteTotalTimeoutConstant;
 * };
 * }
 */
public class _COMMTIMEOUTS {

    public static MemoryLayout $LAYOUT() {
        return constants$10.const$0;
    }
    public static VarHandle ReadIntervalTimeout$VH() {
        return constants$10.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long ReadIntervalTimeout;
     * }
     */
    public static int ReadIntervalTimeout$get(MemorySegment seg) {
        return (int)constants$10.const$1.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long ReadIntervalTimeout;
     * }
     */
    public static void ReadIntervalTimeout$set(MemorySegment seg, int x) {
        constants$10.const$1.set(seg, 0L, x);
    }
    public static int ReadIntervalTimeout$get(MemorySegment seg, long index) {
        return (int)constants$10.const$1.get(seg, index * sizeof());    }
    public static void ReadIntervalTimeout$set(MemorySegment seg, long index, int x) {
        constants$10.const$1.set(seg, index * sizeof(), x);
    }
    public static VarHandle ReadTotalTimeoutMultiplier$VH() {
        return constants$10.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long ReadTotalTimeoutMultiplier;
     * }
     */
    public static int ReadTotalTimeoutMultiplier$get(MemorySegment seg) {
        return (int)constants$10.const$2.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long ReadTotalTimeoutMultiplier;
     * }
     */
    public static void ReadTotalTimeoutMultiplier$set(MemorySegment seg, int x) {
        constants$10.const$2.set(seg, 0L, x);
    }
    public static int ReadTotalTimeoutMultiplier$get(MemorySegment seg, long index) {
        return (int)constants$10.const$2.get(seg, index * sizeof());    }
    public static void ReadTotalTimeoutMultiplier$set(MemorySegment seg, long index, int x) {
        constants$10.const$2.set(seg, index * sizeof(), x);
    }
    public static VarHandle ReadTotalTimeoutConstant$VH() {
        return constants$10.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long ReadTotalTimeoutConstant;
     * }
     */
    public static int ReadTotalTimeoutConstant$get(MemorySegment seg) {
        return (int)constants$10.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long ReadTotalTimeoutConstant;
     * }
     */
    public static void ReadTotalTimeoutConstant$set(MemorySegment seg, int x) {
        constants$10.const$3.set(seg, 0L, x);
    }
    public static int ReadTotalTimeoutConstant$get(MemorySegment seg, long index) {
        return (int)constants$10.const$3.get(seg, index * sizeof());    }
    public static void ReadTotalTimeoutConstant$set(MemorySegment seg, long index, int x) {
        constants$10.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle WriteTotalTimeoutMultiplier$VH() {
        return constants$10.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long WriteTotalTimeoutMultiplier;
     * }
     */
    public static int WriteTotalTimeoutMultiplier$get(MemorySegment seg) {
        return (int)constants$10.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long WriteTotalTimeoutMultiplier;
     * }
     */
    public static void WriteTotalTimeoutMultiplier$set(MemorySegment seg, int x) {
        constants$10.const$4.set(seg, 0L, x);
    }
    public static int WriteTotalTimeoutMultiplier$get(MemorySegment seg, long index) {
        return (int)constants$10.const$4.get(seg, index * sizeof());    }
    public static void WriteTotalTimeoutMultiplier$set(MemorySegment seg, long index, int x) {
        constants$10.const$4.set(seg, index * sizeof(), x);
    }
    public static VarHandle WriteTotalTimeoutConstant$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long WriteTotalTimeoutConstant;
     * }
     */
    public static int WriteTotalTimeoutConstant$get(MemorySegment seg) {
        return (int)constants$10.const$5.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long WriteTotalTimeoutConstant;
     * }
     */
    public static void WriteTotalTimeoutConstant$set(MemorySegment seg, int x) {
        constants$10.const$5.set(seg, 0L, x);
    }
    public static int WriteTotalTimeoutConstant$get(MemorySegment seg, long index) {
        return (int)constants$10.const$5.get(seg, index * sizeof());    }
    public static void WriteTotalTimeoutConstant$set(MemorySegment seg, long index, int x) {
        constants$10.const$5.set(seg, index * sizeof(), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


