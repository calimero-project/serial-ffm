// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct timeval {
 *     long tv_sec;
 *     long tv_usec;
 * };
 * }
 */
public class timeval {

    public static MemoryLayout $LAYOUT() {
        return constants$8.const$2;
    }
    public static VarHandle tv_sec$VH() {
        return constants$8.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long tv_sec;
     * }
     */
    public static long tv_sec$get(MemorySegment seg) {
        return (long)constants$8.const$3.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long tv_sec;
     * }
     */
    public static void tv_sec$set(MemorySegment seg, long x) {
        constants$8.const$3.set(seg, 0L, x);
    }
    public static long tv_sec$get(MemorySegment seg, long index) {
        return (long)constants$8.const$3.get(seg, index * sizeof());    }
    public static void tv_sec$set(MemorySegment seg, long index, long x) {
        constants$8.const$3.set(seg, index * sizeof(), x);
    }
    public static VarHandle tv_usec$VH() {
        return constants$8.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long tv_usec;
     * }
     */
    public static long tv_usec$get(MemorySegment seg) {
        return (long)constants$8.const$4.get(seg, 0L);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long tv_usec;
     * }
     */
    public static void tv_usec$set(MemorySegment seg, long x) {
        constants$8.const$4.set(seg, 0L, x);
    }
    public static long tv_usec$get(MemorySegment seg, long index) {
        return (long)constants$8.const$4.get(seg, index * sizeof());    }
    public static void tv_usec$set(MemorySegment seg, long index, long x) {
        constants$8.const$4.set(seg, index * sizeof(), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


