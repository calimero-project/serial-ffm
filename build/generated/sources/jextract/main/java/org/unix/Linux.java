// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Linux  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define O_RDWR 2
     * }
     */
    public static int O_RDWR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define O_CREAT 64
     * }
     */
    public static int O_CREAT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define O_EXCL 128
     * }
     */
    public static int O_EXCL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define O_NOCTTY 256
     * }
     */
    public static int O_NOCTTY() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define O_NONBLOCK 2048
     * }
     */
    public static int O_NONBLOCK() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define F_SETFL 4
     * }
     */
    public static int F_SETFL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define VTIME 5
     * }
     */
    public static int VTIME() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define VMIN 6
     * }
     */
    public static int VMIN() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define INPCK 16
     * }
     */
    public static int INPCK() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IXON 1024
     * }
     */
    public static int IXON() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define IXANY 2048
     * }
     */
    public static int IXANY() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define IXOFF 4096
     * }
     */
    public static int IXOFF() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define B0 0
     * }
     */
    public static int B0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define B50 1
     * }
     */
    public static int B50() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define B75 2
     * }
     */
    public static int B75() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define B110 3
     * }
     */
    public static int B110() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define B134 4
     * }
     */
    public static int B134() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define B150 5
     * }
     */
    public static int B150() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define B200 6
     * }
     */
    public static int B200() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define B300 7
     * }
     */
    public static int B300() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define B600 8
     * }
     */
    public static int B600() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define B1200 9
     * }
     */
    public static int B1200() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define B1800 10
     * }
     */
    public static int B1800() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define B2400 11
     * }
     */
    public static int B2400() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define B4800 12
     * }
     */
    public static int B4800() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define B9600 13
     * }
     */
    public static int B9600() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define B19200 14
     * }
     */
    public static int B19200() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define B38400 15
     * }
     */
    public static int B38400() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define B57600 4097
     * }
     */
    public static int B57600() {
        return (int)4097L;
    }
    /**
     * {@snippet :
     * #define B115200 4098
     * }
     */
    public static int B115200() {
        return (int)4098L;
    }
    /**
     * {@snippet :
     * #define B230400 4099
     * }
     */
    public static int B230400() {
        return (int)4099L;
    }
    /**
     * {@snippet :
     * #define CSIZE 48
     * }
     */
    public static int CSIZE() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define CS5 0
     * }
     */
    public static int CS5() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CS6 16
     * }
     */
    public static int CS6() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define CS7 32
     * }
     */
    public static int CS7() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CS8 48
     * }
     */
    public static int CS8() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define CSTOPB 64
     * }
     */
    public static int CSTOPB() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define CREAD 128
     * }
     */
    public static int CREAD() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define PARENB 256
     * }
     */
    public static int PARENB() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define PARODD 512
     * }
     */
    public static int PARODD() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define CLOCAL 2048
     * }
     */
    public static int CLOCAL() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define TCSANOW 0
     * }
     */
    public static int TCSANOW() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TIOCEXCL 21516
     * }
     */
    public static int TIOCEXCL() {
        return (int)21516L;
    }
    /**
     * {@snippet :
     * #define TIOCMGET 21525
     * }
     */
    public static int TIOCMGET() {
        return (int)21525L;
    }
    /**
     * {@snippet :
     * #define TIOCMSET 21528
     * }
     */
    public static int TIOCMSET() {
        return (int)21528L;
    }
    /**
     * {@snippet :
     * #define FIONREAD 21531
     * }
     */
    public static int FIONREAD() {
        return (int)21531L;
    }
    /**
     * {@snippet :
     * #define TIOCM_DTR 2
     * }
     */
    public static int TIOCM_DTR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define TIOCM_RTS 4
     * }
     */
    public static int TIOCM_RTS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define TIOCM_CTS 32
     * }
     */
    public static int TIOCM_CTS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define TIOCM_CAR 64
     * }
     */
    public static int TIOCM_CAR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define TIOCM_RNG 128
     * }
     */
    public static int TIOCM_RNG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define TIOCM_DSR 256
     * }
     */
    public static int TIOCM_DSR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define EAGAIN 11
     * }
     */
    public static int EAGAIN() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return (int)4096L;
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"close");
    }
    /**
     * {@snippet :
     * int close(int __fd);
     * }
     */
    public static int close(int __fd) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"read");
    }
    /**
     * {@snippet :
     * long read(int __fd, void* __buf, unsigned long __nbytes);
     * }
     */
    public static long read(int __fd, MemorySegment __buf, long __nbytes) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$4,"write");
    }
    /**
     * {@snippet :
     * long write(int __fd, void* __buf, unsigned long __n);
     * }
     */
    public static long write(int __fd, MemorySegment __buf, long __n) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$6,"getpid");
    }
    /**
     * {@snippet :
     * int getpid();
     * }
     */
    public static int getpid() {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"link");
    }
    /**
     * {@snippet :
     * int link(char* __from, char* __to);
     * }
     */
    public static int link(MemorySegment __from, MemorySegment __to) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"unlink");
    }
    /**
     * {@snippet :
     * int unlink(char* __name);
     * }
     */
    public static int unlink(MemorySegment __name) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"stat");
    }
    /**
     * {@snippet :
     * int stat(char* __file, struct stat* __buf);
     * }
     */
    public static int stat(MemorySegment __file, MemorySegment __buf) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"fcntl");
    }
    /**
     * {@snippet :
     * int fcntl(int __fd, int __cmd,...);
     * }
     */
    public static int fcntl(int __fd, int __cmd, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"open");
    }
    /**
     * {@snippet :
     * int open(char* __file, int __oflag,...);
     * }
     */
    public static int open(MemorySegment __file, int __oflag, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cfgetispeed$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$2,"cfgetispeed");
    }
    /**
     * {@snippet :
     * unsigned int cfgetispeed(struct termios* __termios_p);
     * }
     */
    public static int cfgetispeed(MemorySegment __termios_p) {
        var mh$ = cfgetispeed$MH();
        try {
            return (int)mh$.invokeExact(__termios_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cfsetospeed$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"cfsetospeed");
    }
    /**
     * {@snippet :
     * int cfsetospeed(struct termios* __termios_p, unsigned int __speed);
     * }
     */
    public static int cfsetospeed(MemorySegment __termios_p, int __speed) {
        var mh$ = cfsetospeed$MH();
        try {
            return (int)mh$.invokeExact(__termios_p, __speed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cfsetispeed$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"cfsetispeed");
    }
    /**
     * {@snippet :
     * int cfsetispeed(struct termios* __termios_p, unsigned int __speed);
     * }
     */
    public static int cfsetispeed(MemorySegment __termios_p, int __speed) {
        var mh$ = cfsetispeed$MH();
        try {
            return (int)mh$.invokeExact(__termios_p, __speed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"tcgetattr");
    }
    /**
     * {@snippet :
     * int tcgetattr(int __fd, struct termios* __termios_p);
     * }
     */
    public static int tcgetattr(int __fd, MemorySegment __termios_p) {
        var mh$ = tcgetattr$MH();
        try {
            return (int)mh$.invokeExact(__fd, __termios_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetattr$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"tcsetattr");
    }
    /**
     * {@snippet :
     * int tcsetattr(int __fd, int __optional_actions, struct termios* __termios_p);
     * }
     */
    public static int tcsetattr(int __fd, int __optional_actions, MemorySegment __termios_p) {
        var mh$ = tcsetattr$MH();
        try {
            return (int)mh$.invokeExact(__fd, __optional_actions, __termios_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcdrain$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"tcdrain");
    }
    /**
     * {@snippet :
     * int tcdrain(int __fd);
     * }
     */
    public static int tcdrain(int __fd) {
        var mh$ = tcdrain$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ioctl$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"ioctl");
    }
    /**
     * {@snippet :
     * int ioctl(int __fd, unsigned long __request,...);
     * }
     */
    public static int ioctl(int __fd, long __request, Object... x2) {
        var mh$ = ioctl$MH();
        try {
            return (int)mh$.invokeExact(__fd, __request, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$6,"strlen");
    }
    /**
     * {@snippet :
     * unsigned long strlen(char* __s);
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"strerror");
    }
    /**
     * {@snippet :
     * char* strerror(int __errnum);
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kill$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"kill");
    }
    /**
     * {@snippet :
     * int kill(int __pid, int __sig);
     * }
     */
    public static int kill(int __pid, int __sig) {
        var mh$ = kill$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closedir$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"closedir");
    }
    /**
     * {@snippet :
     * int closedir(struct __dirstream* __dirp);
     * }
     */
    public static int closedir(MemorySegment __dirp) {
        var mh$ = closedir$MH();
        try {
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle opendir$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"opendir");
    }
    /**
     * {@snippet :
     * struct __dirstream* opendir(char* __name);
     * }
     */
    public static MemorySegment opendir(MemorySegment __name) {
        var mh$ = opendir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readdir$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"readdir");
    }
    /**
     * {@snippet :
     * struct dirent* readdir(struct __dirstream* __dirp);
     * }
     */
    public static MemorySegment readdir(MemorySegment __dirp) {
        var mh$ = readdir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$16.const$2;
    }
    /**
     * {@snippet :
     * #define F_SETOWN 8
     * }
     */
    public static int F_SETOWN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CRTSCTS 2147483648
     * }
     */
    public static int CRTSCTS() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define EWOULDBLOCK 11
     * }
     */
    public static int EWOULDBLOCK() {
        return (int)11L;
    }
}


